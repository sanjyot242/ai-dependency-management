// Create a new file: VulnerabilityDetails.tsx

import React, { useEffect, useState } from 'react';
import apiClient from '../api';

interface Vulnerability {
  id: string;
  severity: 'critical' | 'high' | 'medium' | 'low' | 'info';
  description: string;
  references?: string[];
  fixedIn?: string;
}

interface VulnerabilitySummary {
  total: number;
  high: number;
  medium: number;
  low: number;
  packagesAffected: number;
  highSeverityPackages: string[];
  dataSource: string;
  scannedAt: string;
}

interface VulnerabilityDetailsProps {
  scanId: string;
  onClose: () => void;
}

const VulnerabilityDetails: React.FC<VulnerabilityDetailsProps> = ({
  scanId,
  onClose,
}) => {
  const [summary, setSummary] = useState<VulnerabilitySummary | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedPackage, setSelectedPackage] = useState<string | null>(null);
  const [packageVulnerabilities, setPackageVulnerabilities] = useState<
    Vulnerability[]
  >([]);
  const [packageLoading, setPackageLoading] = useState(false);

  useEffect(() => {
    const fetchVulnerabilitySummary = async () => {
      try {
        setLoading(true);
        const response = await apiClient.getVulnerabilitySummary(scanId);
        setSummary(response.data);
      } catch (error) {
        console.error('Error fetching vulnerability summary:', error);
        setError('Failed to load vulnerability data');
      } finally {
        setLoading(false);
      }
    };

    fetchVulnerabilitySummary();
  }, [scanId]);

  const handlePackageSelect = async (packageName: string) => {
    try {
      setPackageLoading(true);
      setSelectedPackage(packageName);
      const response = await apiClient.getDependencyVulnerabilities(
        scanId,
        packageName
      );
      setPackageVulnerabilities(response.data.vulnerabilities || []);
    } catch (error) {
      console.error('Error fetching package vulnerabilities:', error);
      setPackageVulnerabilities([]);
    } finally {
      setPackageLoading(false);
    }
  };

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical':
        return 'bg-red-600 text-white';
      case 'high':
        return 'bg-red-500 text-white';
      case 'medium':
        return 'bg-orange-500 text-white';
      case 'low':
        return 'bg-yellow-500 text-white';
      default:
        return 'bg-blue-500 text-white';
    }
  };

  if (loading) {
    return (
      <div className='p-6 bg-white rounded-lg shadow'>
        <div className='flex justify-center'>
          <div className='animate-spin h-8 w-8 border-4 border-blue-500 rounded-full border-t-transparent'></div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className='p-6 bg-white rounded-lg shadow'>
        <div className='text-red-500'>{error}</div>
        <button
          onClick={onClose}
          className='mt-4 px-4 py-2 bg-gray-200 rounded hover:bg-gray-300'>
          Close
        </button>
      </div>
    );
  }

  return (
    <div className='p-6 bg-white rounded-lg shadow max-w-4xl mx-auto'>
      <div className='flex justify-between items-center mb-6'>
        <h2 className='text-xl font-semibold'>Vulnerability Scan Results</h2>
        <div className='flex items-center space-x-2'>
          <span className='text-sm text-gray-500'>
            Source: {summary?.dataSource || 'OSV'}
          </span>
          <button
            onClick={onClose}
            className='px-3 py-1 bg-gray-200 rounded hover:bg-gray-300'>
            Close
          </button>
        </div>
      </div>

      {summary && (
        <div className='grid grid-cols-1 md:grid-cols-4 gap-4 mb-6'>
          <div className='bg-blue-50 p-4 rounded-lg text-center'>
            <div className='text-2xl font-bold'>{summary.total}</div>
            <div className='text-sm text-gray-600'>Total Vulnerabilities</div>
          </div>
          <div className='bg-red-50 p-4 rounded-lg text-center'>
            <div className='text-2xl font-bold text-red-600'>
              {summary.high}
            </div>
            <div className='text-sm text-gray-600'>High Severity</div>
          </div>
          <div className='bg-orange-50 p-4 rounded-lg text-center'>
            <div className='text-2xl font-bold text-orange-500'>
              {summary.medium}
            </div>
            <div className='text-sm text-gray-600'>Medium Severity</div>
          </div>
          <div className='bg-yellow-50 p-4 rounded-lg text-center'>
            <div className='text-2xl font-bold text-yellow-600'>
              {summary.low}
            </div>
            <div className='text-sm text-gray-600'>Low Severity</div>
          </div>
        </div>
      )}

      {summary && summary.highSeverityPackages.length > 0 && (
        <div className='mb-6'>
          <h3 className='font-semibold mb-2'>
            Packages with High Severity Vulnerabilities
          </h3>
          <div className='flex flex-wrap gap-2'>
            {summary.highSeverityPackages.map((pkg) => (
              <button
                key={pkg}
                onClick={() => handlePackageSelect(pkg)}
                className={`px-3 py-1 rounded-full text-sm ${
                  selectedPackage === pkg
                    ? 'bg-red-600 text-white'
                    : 'bg-red-100 text-red-800'
                }`}>
                {pkg}
              </button>
            ))}
          </div>
        </div>
      )}

      {selectedPackage && (
        <div className='mt-8'>
          <h3 className='font-semibold mb-4'>
            Vulnerabilities in {selectedPackage}
          </h3>

          {packageLoading ? (
            <div className='flex justify-center py-4'>
              <div className='animate-spin h-6 w-6 border-2 border-blue-500 rounded-full border-t-transparent'></div>
            </div>
          ) : packageVulnerabilities.length === 0 ? (
            <div className='text-gray-500'>No details available</div>
          ) : (
            <div className='space-y-4'>
              {packageVulnerabilities.map((vuln) => (
                <div key={vuln.id} className='border rounded-lg p-4 bg-gray-50'>
                  <div className='flex justify-between items-start mb-2'>
                    <div className='font-medium'>{vuln.id}</div>
                    <span
                      className={`px-2 py-1 rounded-full text-xs ${getSeverityColor(
                        vuln.severity
                      )}`}>
                      {vuln.severity.toUpperCase()}
                    </span>
                  </div>
                  <div className='mb-3'>{vuln.description}</div>

                  {vuln.fixedIn && (
                    <div className='mb-2 text-sm'>
                      <span className='font-medium'>Fixed in:</span>{' '}
                      {vuln.fixedIn}
                    </div>
                  )}

                  {vuln.references && vuln.references.length > 0 && (
                    <div className='mt-2'>
                      <div className='font-medium text-sm mb-1'>
                        References:
                      </div>
                      <ul className='text-sm text-blue-600'>
                        {vuln.references.slice(0, 3).map((ref, index) => (
                          <li key={index}>
                            <a
                              href={ref}
                              target='_blank'
                              rel='noopener noreferrer'
                              className='hover:underline'>
                              {ref.substring(0, 60)}...
                            </a>
                          </li>
                        ))}
                        {vuln.references.length > 3 && (
                          <li className='text-gray-500 text-xs'>
                            + {vuln.references.length - 3} more
                          </li>
                        )}
                      </ul>
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default VulnerabilityDetails;
